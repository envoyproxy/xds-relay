// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.20.1
// 	protoc        v3.11.4
// source: aggregation/v1/aggregation.proto

package aggregationv1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NodeFieldType int32

const (
	NodeFieldType_NODE_ID               NodeFieldType = 0
	NodeFieldType_NODE_CLUSTER          NodeFieldType = 1
	NodeFieldType_NODE_LOCALITY_REGION  NodeFieldType = 2
	NodeFieldType_NODE_LOCALITY_ZONE    NodeFieldType = 3
	NodeFieldType_NODE_LOCALITY_SUBZONE NodeFieldType = 4
)

// Enum value maps for NodeFieldType.
var (
	NodeFieldType_name = map[int32]string{
		0: "NODE_ID",
		1: "NODE_CLUSTER",
		2: "NODE_LOCALITY_REGION",
		3: "NODE_LOCALITY_ZONE",
		4: "NODE_LOCALITY_SUBZONE",
	}
	NodeFieldType_value = map[string]int32{
		"NODE_ID":               0,
		"NODE_CLUSTER":          1,
		"NODE_LOCALITY_REGION":  2,
		"NODE_LOCALITY_ZONE":    3,
		"NODE_LOCALITY_SUBZONE": 4,
	}
)

func (x NodeFieldType) Enum() *NodeFieldType {
	p := new(NodeFieldType)
	*p = x
	return p
}

func (x NodeFieldType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeFieldType) Descriptor() protoreflect.EnumDescriptor {
	return file_aggregation_v1_aggregation_proto_enumTypes[0].Descriptor()
}

func (NodeFieldType) Type() protoreflect.EnumType {
	return &file_aggregation_v1_aggregation_proto_enumTypes[0]
}

func (x NodeFieldType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeFieldType.Descriptor instead.
func (NodeFieldType) EnumDescriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{0}
}

// [#next-free-field: 2]
type KeyerConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Fragments are the pieces that form a cache key.
	Fragments []*KeyerConfiguration_Fragment `protobuf:"bytes,1,rep,name=fragments,proto3" json:"fragments,omitempty"`
}

func (x *KeyerConfiguration) Reset() {
	*x = KeyerConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyerConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyerConfiguration) ProtoMessage() {}

func (x *KeyerConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyerConfiguration.ProtoReflect.Descriptor instead.
func (*KeyerConfiguration) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{0}
}

func (x *KeyerConfiguration) GetFragments() []*KeyerConfiguration_Fragment {
	if x != nil {
		return x.Fragments
	}
	return nil
}

// This is a recursive structure which allows complex nested match
// configurations to be built using various logical operators.
// [#next-free-field: 7]
type MatchPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*MatchPredicate_AndMatch
	//	*MatchPredicate_OrMatch
	//	*MatchPredicate_NotMatch
	//	*MatchPredicate_AnyMatch
	//	*MatchPredicate_RequestTypeMatch_
	//	*MatchPredicate_RequestNodeMatch_
	Type isMatchPredicate_Type `protobuf_oneof:"type"`
}

func (x *MatchPredicate) Reset() {
	*x = MatchPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPredicate) ProtoMessage() {}

func (x *MatchPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPredicate.ProtoReflect.Descriptor instead.
func (*MatchPredicate) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{1}
}

func (m *MatchPredicate) GetType() isMatchPredicate_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MatchPredicate) GetAndMatch() *MatchPredicate_MatchSet {
	if x, ok := x.GetType().(*MatchPredicate_AndMatch); ok {
		return x.AndMatch
	}
	return nil
}

func (x *MatchPredicate) GetOrMatch() *MatchPredicate_MatchSet {
	if x, ok := x.GetType().(*MatchPredicate_OrMatch); ok {
		return x.OrMatch
	}
	return nil
}

func (x *MatchPredicate) GetNotMatch() *MatchPredicate {
	if x, ok := x.GetType().(*MatchPredicate_NotMatch); ok {
		return x.NotMatch
	}
	return nil
}

func (x *MatchPredicate) GetAnyMatch() bool {
	if x, ok := x.GetType().(*MatchPredicate_AnyMatch); ok {
		return x.AnyMatch
	}
	return false
}

func (x *MatchPredicate) GetRequestTypeMatch() *MatchPredicate_RequestTypeMatch {
	if x, ok := x.GetType().(*MatchPredicate_RequestTypeMatch_); ok {
		return x.RequestTypeMatch
	}
	return nil
}

func (x *MatchPredicate) GetRequestNodeMatch() *MatchPredicate_RequestNodeMatch {
	if x, ok := x.GetType().(*MatchPredicate_RequestNodeMatch_); ok {
		return x.RequestNodeMatch
	}
	return nil
}

type isMatchPredicate_Type interface {
	isMatchPredicate_Type()
}

type MatchPredicate_AndMatch struct {
	// A set that describes a logical AND. If any member of the set
	// matches, the match configuration matches.
	AndMatch *MatchPredicate_MatchSet `protobuf:"bytes,1,opt,name=and_match,json=andMatch,proto3,oneof"`
}

type MatchPredicate_OrMatch struct {
	// A set that describes a logical OR. If all members of the set
	// match, the match configuration matches.
	OrMatch *MatchPredicate_MatchSet `protobuf:"bytes,2,opt,name=or_match,json=orMatch,proto3,oneof"`
}

type MatchPredicate_NotMatch struct {
	// A negation match. The match configuration will match if the
	// negated match condition matches.
	NotMatch *MatchPredicate `protobuf:"bytes,3,opt,name=not_match,json=notMatch,proto3,oneof"`
}

type MatchPredicate_AnyMatch struct {
	// The match configuration will always match.
	AnyMatch bool `protobuf:"varint,4,opt,name=any_match,json=anyMatch,proto3,oneof"`
}

type MatchPredicate_RequestTypeMatch_ struct {
	// Match on an Envoy request type.
	// Ex: "type.googleapis.com/envoy.api.v2.Listener"
	RequestTypeMatch *MatchPredicate_RequestTypeMatch `protobuf:"bytes,5,opt,name=request_type_match,json=requestTypeMatch,proto3,oneof"`
}

type MatchPredicate_RequestNodeMatch_ struct {
	// Match on a Field in Envoy's request node.
	RequestNodeMatch *MatchPredicate_RequestNodeMatch `protobuf:"bytes,6,opt,name=request_node_match,json=requestNodeMatch,proto3,oneof"`
}

func (*MatchPredicate_AndMatch) isMatchPredicate_Type() {}

func (*MatchPredicate_OrMatch) isMatchPredicate_Type() {}

func (*MatchPredicate_NotMatch) isMatchPredicate_Type() {}

func (*MatchPredicate_AnyMatch) isMatchPredicate_Type() {}

func (*MatchPredicate_RequestTypeMatch_) isMatchPredicate_Type() {}

func (*MatchPredicate_RequestNodeMatch_) isMatchPredicate_Type() {}

// Rules for how to generate the resulting fragment of the xDS Aggregator cache
// key.
// [#next-free-field: 5]
type ResultPredicate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ResultPredicate_AndResult_
	//	*ResultPredicate_RequestNodeFragment_
	//	*ResultPredicate_ResourceNamesFragment_
	//	*ResultPredicate_StringFragment
	Type isResultPredicate_Type `protobuf_oneof:"type"`
}

func (x *ResultPredicate) Reset() {
	*x = ResultPredicate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultPredicate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPredicate) ProtoMessage() {}

func (x *ResultPredicate) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPredicate.ProtoReflect.Descriptor instead.
func (*ResultPredicate) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{2}
}

func (m *ResultPredicate) GetType() isResultPredicate_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ResultPredicate) GetAndResult() *ResultPredicate_AndResult {
	if x, ok := x.GetType().(*ResultPredicate_AndResult_); ok {
		return x.AndResult
	}
	return nil
}

func (x *ResultPredicate) GetRequestNodeFragment() *ResultPredicate_RequestNodeFragment {
	if x, ok := x.GetType().(*ResultPredicate_RequestNodeFragment_); ok {
		return x.RequestNodeFragment
	}
	return nil
}

func (x *ResultPredicate) GetResourceNamesFragment() *ResultPredicate_ResourceNamesFragment {
	if x, ok := x.GetType().(*ResultPredicate_ResourceNamesFragment_); ok {
		return x.ResourceNamesFragment
	}
	return nil
}

func (x *ResultPredicate) GetStringFragment() string {
	if x, ok := x.GetType().(*ResultPredicate_StringFragment); ok {
		return x.StringFragment
	}
	return ""
}

type isResultPredicate_Type interface {
	isResultPredicate_Type()
}

type ResultPredicate_AndResult_ struct {
	// A set that describes a logical AND. The result is a non-separated
	// append operation between two or more fragments.
	AndResult *ResultPredicate_AndResult `protobuf:"bytes,1,opt,name=and_result,json=andResult,proto3,oneof"`
}

type ResultPredicate_RequestNodeFragment_ struct {
	// A fragment generated from an Envoy request node.
	RequestNodeFragment *ResultPredicate_RequestNodeFragment `protobuf:"bytes,2,opt,name=request_node_fragment,json=requestNodeFragment,proto3,oneof"`
}

type ResultPredicate_ResourceNamesFragment_ struct {
	// A fragment generated from Envoy resource names.
	ResourceNamesFragment *ResultPredicate_ResourceNamesFragment `protobuf:"bytes,3,opt,name=resource_names_fragment,json=resourceNamesFragment,proto3,oneof"`
}

type ResultPredicate_StringFragment struct {
	// A simple string fragment
	StringFragment string `protobuf:"bytes,4,opt,name=string_fragment,json=stringFragment,proto3,oneof"`
}

func (*ResultPredicate_AndResult_) isResultPredicate_Type() {}

func (*ResultPredicate_RequestNodeFragment_) isResultPredicate_Type() {}

func (*ResultPredicate_ResourceNamesFragment_) isResultPredicate_Type() {}

func (*ResultPredicate_StringFragment) isResultPredicate_Type() {}

// [#next-free-field: 2]
type KeyerConfiguration_Fragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The first rule that matches will be applied in sequential order.
	Rules []*KeyerConfiguration_Fragment_Rule `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *KeyerConfiguration_Fragment) Reset() {
	*x = KeyerConfiguration_Fragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyerConfiguration_Fragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyerConfiguration_Fragment) ProtoMessage() {}

func (x *KeyerConfiguration_Fragment) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyerConfiguration_Fragment.ProtoReflect.Descriptor instead.
func (*KeyerConfiguration_Fragment) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{0, 0}
}

func (x *KeyerConfiguration_Fragment) GetRules() []*KeyerConfiguration_Fragment_Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

// A rule defining how to match a Envoy request and what resulting
// fragment to generate.
// [#next-free-field: 3]
type KeyerConfiguration_Fragment_Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Defines how to match an Envoy Request.
	Match *MatchPredicate `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// Defines how to generate the resulting fragment if matched.
	Result *ResultPredicate `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *KeyerConfiguration_Fragment_Rule) Reset() {
	*x = KeyerConfiguration_Fragment_Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyerConfiguration_Fragment_Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyerConfiguration_Fragment_Rule) ProtoMessage() {}

func (x *KeyerConfiguration_Fragment_Rule) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyerConfiguration_Fragment_Rule.ProtoReflect.Descriptor instead.
func (*KeyerConfiguration_Fragment_Rule) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *KeyerConfiguration_Fragment_Rule) GetMatch() *MatchPredicate {
	if x != nil {
		return x.Match
	}
	return nil
}

func (x *KeyerConfiguration_Fragment_Rule) GetResult() *ResultPredicate {
	if x != nil {
		return x.Result
	}
	return nil
}

// Rules for matching on a Envoy request type.
// [#next-free-field: 2]
type MatchPredicate_RequestTypeMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One or more Envoy request types to match on.
	// Ex: "type.googleapis.com/envoy.api.v2.Listener"
	Types []string `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *MatchPredicate_RequestTypeMatch) Reset() {
	*x = MatchPredicate_RequestTypeMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPredicate_RequestTypeMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPredicate_RequestTypeMatch) ProtoMessage() {}

func (x *MatchPredicate_RequestTypeMatch) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPredicate_RequestTypeMatch.ProtoReflect.Descriptor instead.
func (*MatchPredicate_RequestTypeMatch) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{1, 0}
}

func (x *MatchPredicate_RequestTypeMatch) GetTypes() []string {
	if x != nil {
		return x.Types
	}
	return nil
}

// Match on a Field in Envoy's request node.
// [#next-free-field: 4]
type MatchPredicate_RequestNodeMatch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the Envoy Request field that should be matched on.
	Field NodeFieldType `protobuf:"varint,1,opt,name=field,proto3,enum=aggregation.NodeFieldType" json:"field,omitempty"`
	// Types that are assignable to Type:
	//	*MatchPredicate_RequestNodeMatch_ExactMatch
	//	*MatchPredicate_RequestNodeMatch_RegexMatch
	Type isMatchPredicate_RequestNodeMatch_Type `protobuf_oneof:"type"`
}

func (x *MatchPredicate_RequestNodeMatch) Reset() {
	*x = MatchPredicate_RequestNodeMatch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPredicate_RequestNodeMatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPredicate_RequestNodeMatch) ProtoMessage() {}

func (x *MatchPredicate_RequestNodeMatch) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPredicate_RequestNodeMatch.ProtoReflect.Descriptor instead.
func (*MatchPredicate_RequestNodeMatch) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{1, 1}
}

func (x *MatchPredicate_RequestNodeMatch) GetField() NodeFieldType {
	if x != nil {
		return x.Field
	}
	return NodeFieldType_NODE_ID
}

func (m *MatchPredicate_RequestNodeMatch) GetType() isMatchPredicate_RequestNodeMatch_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *MatchPredicate_RequestNodeMatch) GetExactMatch() string {
	if x, ok := x.GetType().(*MatchPredicate_RequestNodeMatch_ExactMatch); ok {
		return x.ExactMatch
	}
	return ""
}

func (x *MatchPredicate_RequestNodeMatch) GetRegexMatch() string {
	if x, ok := x.GetType().(*MatchPredicate_RequestNodeMatch_RegexMatch); ok {
		return x.RegexMatch
	}
	return ""
}

type isMatchPredicate_RequestNodeMatch_Type interface {
	isMatchPredicate_RequestNodeMatch_Type()
}

type MatchPredicate_RequestNodeMatch_ExactMatch struct {
	// Match on the extract string value.
	ExactMatch string `protobuf:"bytes,2,opt,name=exact_match,json=exactMatch,proto3,oneof"`
}

type MatchPredicate_RequestNodeMatch_RegexMatch struct {
	// Match on a regex pattern.
	// TODO potentially use "safe regex"
	// https://github.com/envoyproxy/envoy/blob/10f756efa17e56c8d4d1033be7b4286410db4e01/api/envoy/type/matcher/v3/regex.proto
	RegexMatch string `protobuf:"bytes,3,opt,name=regex_match,json=regexMatch,proto3,oneof"`
}

func (*MatchPredicate_RequestNodeMatch_ExactMatch) isMatchPredicate_RequestNodeMatch_Type() {}

func (*MatchPredicate_RequestNodeMatch_RegexMatch) isMatchPredicate_RequestNodeMatch_Type() {}

// A set of match configurations used for logical operations.
// [#next-free-field: 2]
type MatchPredicate_MatchSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of rules that make up the set.
	Rules []*MatchPredicate `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *MatchPredicate_MatchSet) Reset() {
	*x = MatchPredicate_MatchSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchPredicate_MatchSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchPredicate_MatchSet) ProtoMessage() {}

func (x *MatchPredicate_MatchSet) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchPredicate_MatchSet.ProtoReflect.Descriptor instead.
func (*MatchPredicate_MatchSet) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{1, 2}
}

func (x *MatchPredicate_MatchSet) GetRules() []*MatchPredicate {
	if x != nil {
		return x.Rules
	}
	return nil
}

type ResultPredicate_ResultAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Action:
	//	*ResultPredicate_ResultAction_Exact
	//	*ResultPredicate_ResultAction_RegexAction_
	Action isResultPredicate_ResultAction_Action `protobuf_oneof:"action"`
}

func (x *ResultPredicate_ResultAction) Reset() {
	*x = ResultPredicate_ResultAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultPredicate_ResultAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPredicate_ResultAction) ProtoMessage() {}

func (x *ResultPredicate_ResultAction) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPredicate_ResultAction.ProtoReflect.Descriptor instead.
func (*ResultPredicate_ResultAction) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{2, 0}
}

func (m *ResultPredicate_ResultAction) GetAction() isResultPredicate_ResultAction_Action {
	if m != nil {
		return m.Action
	}
	return nil
}

func (x *ResultPredicate_ResultAction) GetExact() bool {
	if x, ok := x.GetAction().(*ResultPredicate_ResultAction_Exact); ok {
		return x.Exact
	}
	return false
}

func (x *ResultPredicate_ResultAction) GetRegexAction() *ResultPredicate_ResultAction_RegexAction {
	if x, ok := x.GetAction().(*ResultPredicate_ResultAction_RegexAction_); ok {
		return x.RegexAction
	}
	return nil
}

type isResultPredicate_ResultAction_Action interface {
	isResultPredicate_ResultAction_Action()
}

type ResultPredicate_ResultAction_Exact struct {
	// Uses the exact string value of the field.
	Exact bool `protobuf:"varint,1,opt,name=exact,proto3,oneof"`
}

type ResultPredicate_ResultAction_RegexAction_ struct {
	// Operates a regex find and replace on the field.
	RegexAction *ResultPredicate_ResultAction_RegexAction `protobuf:"bytes,2,opt,name=regex_action,json=regexAction,proto3,oneof"`
}

func (*ResultPredicate_ResultAction_Exact) isResultPredicate_ResultAction_Action() {}

func (*ResultPredicate_ResultAction_RegexAction_) isResultPredicate_ResultAction_Action() {}

type ResultPredicate_AndResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ResultPredicates []*ResultPredicate `protobuf:"bytes,1,rep,name=result_predicates,json=resultPredicates,proto3" json:"result_predicates,omitempty"`
}

func (x *ResultPredicate_AndResult) Reset() {
	*x = ResultPredicate_AndResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultPredicate_AndResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPredicate_AndResult) ProtoMessage() {}

func (x *ResultPredicate_AndResult) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPredicate_AndResult.ProtoReflect.Descriptor instead.
func (*ResultPredicate_AndResult) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{2, 1}
}

func (x *ResultPredicate_AndResult) GetResultPredicates() []*ResultPredicate {
	if x != nil {
		return x.ResultPredicates
	}
	return nil
}

// Rules for generating the resulting fragment from a Envoy request node.
// [#next-free-field: 3]
type ResultPredicate_RequestNodeFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Field  NodeFieldType                 `protobuf:"varint,1,opt,name=field,proto3,enum=aggregation.NodeFieldType" json:"field,omitempty"`
	Action *ResultPredicate_ResultAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ResultPredicate_RequestNodeFragment) Reset() {
	*x = ResultPredicate_RequestNodeFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultPredicate_RequestNodeFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPredicate_RequestNodeFragment) ProtoMessage() {}

func (x *ResultPredicate_RequestNodeFragment) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPredicate_RequestNodeFragment.ProtoReflect.Descriptor instead.
func (*ResultPredicate_RequestNodeFragment) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{2, 2}
}

func (x *ResultPredicate_RequestNodeFragment) GetField() NodeFieldType {
	if x != nil {
		return x.Field
	}
	return NodeFieldType_NODE_ID
}

func (x *ResultPredicate_RequestNodeFragment) GetAction() *ResultPredicate_ResultAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// Rules for generating the resulting fragment from Envoy request names.
// [#next-free-field: 3]
type ResultPredicate_ResourceNamesFragment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The index of the resource name to operate on.
	// TODO support operation on multiple elements once we move past the MVP.
	Element int32                         `protobuf:"varint,1,opt,name=element,proto3" json:"element,omitempty"`
	Action  *ResultPredicate_ResultAction `protobuf:"bytes,2,opt,name=action,proto3" json:"action,omitempty"`
}

func (x *ResultPredicate_ResourceNamesFragment) Reset() {
	*x = ResultPredicate_ResourceNamesFragment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultPredicate_ResourceNamesFragment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPredicate_ResourceNamesFragment) ProtoMessage() {}

func (x *ResultPredicate_ResourceNamesFragment) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPredicate_ResourceNamesFragment.ProtoReflect.Descriptor instead.
func (*ResultPredicate_ResourceNamesFragment) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{2, 3}
}

func (x *ResultPredicate_ResourceNamesFragment) GetElement() int32 {
	if x != nil {
		return x.Element
	}
	return 0
}

func (x *ResultPredicate_ResourceNamesFragment) GetAction() *ResultPredicate_ResultAction {
	if x != nil {
		return x.Action
	}
	return nil
}

// TODO potentially use "safe regex"
// https://github.com/envoyproxy/envoy/blob/10f756efa17e56c8d4d1033be7b4286410db4e01/api/envoy/type/matcher/v3/regex.proto
// [#next-free-field: 3]
type ResultPredicate_ResultAction_RegexAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern string `protobuf:"bytes,1,opt,name=pattern,proto3" json:"pattern,omitempty"`
	Replace string `protobuf:"bytes,2,opt,name=replace,proto3" json:"replace,omitempty"`
}

func (x *ResultPredicate_ResultAction_RegexAction) Reset() {
	*x = ResultPredicate_ResultAction_RegexAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_aggregation_v1_aggregation_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResultPredicate_ResultAction_RegexAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResultPredicate_ResultAction_RegexAction) ProtoMessage() {}

func (x *ResultPredicate_ResultAction_RegexAction) ProtoReflect() protoreflect.Message {
	mi := &file_aggregation_v1_aggregation_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResultPredicate_ResultAction_RegexAction.ProtoReflect.Descriptor instead.
func (*ResultPredicate_ResultAction_RegexAction) Descriptor() ([]byte, []int) {
	return file_aggregation_v1_aggregation_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *ResultPredicate_ResultAction_RegexAction) GetPattern() string {
	if x != nil {
		return x.Pattern
	}
	return ""
}

func (x *ResultPredicate_ResultAction_RegexAction) GetReplace() string {
	if x != nil {
		return x.Replace
	}
	return ""
}

var File_aggregation_v1_aggregation_proto protoreflect.FileDescriptor

var file_aggregation_v1_aggregation_proto_rawDesc = []byte{
	0x0a, 0x20, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31,
	0x2f, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x0b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc8, 0x02, 0x0a, 0x12, 0x4b, 0x65, 0x79,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x50, 0x0a, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4b, 0x65, 0x79, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x09, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x1a, 0xdf, 0x01, 0x0a, 0x08, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4d,
	0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x65,
	0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x46,
	0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x42, 0x08, 0xfa, 0x42,
	0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x1a, 0x83, 0x01,
	0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x3b, 0x0a, 0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x22, 0xe6, 0x05, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a, 0x09, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53, 0x65, 0x74, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x6e, 0x64, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x41, 0x0a, 0x08, 0x6f,
	0x72, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a,
	0x0a, 0x09, 0x6e, 0x6f, 0x74, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x6f, 0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x26, 0x0a, 0x09, 0x61, 0x6e,
	0x79, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x6a, 0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x08, 0x61, 0x6e, 0x79, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x5c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x10,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x12, 0x5c, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x1a, 0x32,
	0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x12, 0x1e, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x01, 0x52, 0x05, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x1a, 0xa1, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x21, 0x0a, 0x0b, 0x65, 0x78, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x61, 0x74,
	0x63, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x61, 0x63,
	0x74, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x21, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x65, 0x78, 0x5f,
	0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x72,
	0x65, 0x67, 0x65, 0x78, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x1a, 0x47, 0x0a, 0x08, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x53,
	0x65, 0x74, 0x12, 0x3b, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x08,
	0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x02, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x42,
	0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x22, 0xe7, 0x07, 0x0a,
	0x0f, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x12, 0x47, 0x0a, 0x0a, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x2e, 0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x66, 0x0a, 0x15, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x13, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x6c, 0x0a, 0x17, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x15, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x29, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0xef, 0x01, 0x0a, 0x0c, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x05, 0x65,
	0x78, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x6a,
	0x02, 0x08, 0x01, 0x48, 0x00, 0x52, 0x05, 0x65, 0x78, 0x61, 0x63, 0x74, 0x12, 0x5a, 0x0a, 0x0c,
	0x72, 0x65, 0x67, 0x65, 0x78, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x35, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x65, 0x67,
	0x65, 0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x53, 0x0a, 0x0b, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10,
	0x01, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x21, 0x0a, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x72, 0x02, 0x10, 0x00, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x0d, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x1a, 0x60, 0x0a, 0x09,
	0x41, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x92, 0x01, 0x02, 0x08, 0x02, 0x52, 0x10, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x1a, 0x9e,
	0x01, 0x0a, 0x13, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x72,
	0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x82, 0x01, 0x02, 0x10, 0x01, 0x52, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x4b, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa,
	0x42, 0x05, 0x8a, 0x01, 0x02, 0x10, 0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x87, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x46, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x07, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x28, 0x00, 0x52, 0x07, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x4b, 0x0a, 0x06,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x61,
	0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x08, 0xfa, 0x42, 0x05, 0x8a, 0x01, 0x02, 0x10,
	0x01, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x03, 0xf8, 0x42, 0x01, 0x2a, 0x7b, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x44, 0x45, 0x5f,
	0x49, 0x44, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x4c, 0x55,
	0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c,
	0x4f, 0x43, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x16, 0x0a, 0x12, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x54,
	0x59, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x4e, 0x4f, 0x44, 0x45,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x49, 0x54, 0x59, 0x5f, 0x53, 0x55, 0x42, 0x5a, 0x4f, 0x4e,
	0x45, 0x10, 0x04, 0x42, 0x1e, 0x5a, 0x1c, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x3b, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_aggregation_v1_aggregation_proto_rawDescOnce sync.Once
	file_aggregation_v1_aggregation_proto_rawDescData = file_aggregation_v1_aggregation_proto_rawDesc
)

func file_aggregation_v1_aggregation_proto_rawDescGZIP() []byte {
	file_aggregation_v1_aggregation_proto_rawDescOnce.Do(func() {
		file_aggregation_v1_aggregation_proto_rawDescData = protoimpl.X.CompressGZIP(file_aggregation_v1_aggregation_proto_rawDescData)
	})
	return file_aggregation_v1_aggregation_proto_rawDescData
}

var file_aggregation_v1_aggregation_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_aggregation_v1_aggregation_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_aggregation_v1_aggregation_proto_goTypes = []interface{}{
	(NodeFieldType)(0),                               // 0: aggregation.NodeFieldType
	(*KeyerConfiguration)(nil),                       // 1: aggregation.KeyerConfiguration
	(*MatchPredicate)(nil),                           // 2: aggregation.MatchPredicate
	(*ResultPredicate)(nil),                          // 3: aggregation.ResultPredicate
	(*KeyerConfiguration_Fragment)(nil),              // 4: aggregation.KeyerConfiguration.Fragment
	(*KeyerConfiguration_Fragment_Rule)(nil),         // 5: aggregation.KeyerConfiguration.Fragment.Rule
	(*MatchPredicate_RequestTypeMatch)(nil),          // 6: aggregation.MatchPredicate.RequestTypeMatch
	(*MatchPredicate_RequestNodeMatch)(nil),          // 7: aggregation.MatchPredicate.RequestNodeMatch
	(*MatchPredicate_MatchSet)(nil),                  // 8: aggregation.MatchPredicate.MatchSet
	(*ResultPredicate_ResultAction)(nil),             // 9: aggregation.ResultPredicate.ResultAction
	(*ResultPredicate_AndResult)(nil),                // 10: aggregation.ResultPredicate.AndResult
	(*ResultPredicate_RequestNodeFragment)(nil),      // 11: aggregation.ResultPredicate.RequestNodeFragment
	(*ResultPredicate_ResourceNamesFragment)(nil),    // 12: aggregation.ResultPredicate.ResourceNamesFragment
	(*ResultPredicate_ResultAction_RegexAction)(nil), // 13: aggregation.ResultPredicate.ResultAction.RegexAction
}
var file_aggregation_v1_aggregation_proto_depIdxs = []int32{
	4,  // 0: aggregation.KeyerConfiguration.fragments:type_name -> aggregation.KeyerConfiguration.Fragment
	8,  // 1: aggregation.MatchPredicate.and_match:type_name -> aggregation.MatchPredicate.MatchSet
	8,  // 2: aggregation.MatchPredicate.or_match:type_name -> aggregation.MatchPredicate.MatchSet
	2,  // 3: aggregation.MatchPredicate.not_match:type_name -> aggregation.MatchPredicate
	6,  // 4: aggregation.MatchPredicate.request_type_match:type_name -> aggregation.MatchPredicate.RequestTypeMatch
	7,  // 5: aggregation.MatchPredicate.request_node_match:type_name -> aggregation.MatchPredicate.RequestNodeMatch
	10, // 6: aggregation.ResultPredicate.and_result:type_name -> aggregation.ResultPredicate.AndResult
	11, // 7: aggregation.ResultPredicate.request_node_fragment:type_name -> aggregation.ResultPredicate.RequestNodeFragment
	12, // 8: aggregation.ResultPredicate.resource_names_fragment:type_name -> aggregation.ResultPredicate.ResourceNamesFragment
	5,  // 9: aggregation.KeyerConfiguration.Fragment.rules:type_name -> aggregation.KeyerConfiguration.Fragment.Rule
	2,  // 10: aggregation.KeyerConfiguration.Fragment.Rule.match:type_name -> aggregation.MatchPredicate
	3,  // 11: aggregation.KeyerConfiguration.Fragment.Rule.result:type_name -> aggregation.ResultPredicate
	0,  // 12: aggregation.MatchPredicate.RequestNodeMatch.field:type_name -> aggregation.NodeFieldType
	2,  // 13: aggregation.MatchPredicate.MatchSet.rules:type_name -> aggregation.MatchPredicate
	13, // 14: aggregation.ResultPredicate.ResultAction.regex_action:type_name -> aggregation.ResultPredicate.ResultAction.RegexAction
	3,  // 15: aggregation.ResultPredicate.AndResult.result_predicates:type_name -> aggregation.ResultPredicate
	0,  // 16: aggregation.ResultPredicate.RequestNodeFragment.field:type_name -> aggregation.NodeFieldType
	9,  // 17: aggregation.ResultPredicate.RequestNodeFragment.action:type_name -> aggregation.ResultPredicate.ResultAction
	9,  // 18: aggregation.ResultPredicate.ResourceNamesFragment.action:type_name -> aggregation.ResultPredicate.ResultAction
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_aggregation_v1_aggregation_proto_init() }
func file_aggregation_v1_aggregation_proto_init() {
	if File_aggregation_v1_aggregation_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_aggregation_v1_aggregation_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyerConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultPredicate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyerConfiguration_Fragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyerConfiguration_Fragment_Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPredicate_RequestTypeMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPredicate_RequestNodeMatch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchPredicate_MatchSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultPredicate_ResultAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultPredicate_AndResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultPredicate_RequestNodeFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultPredicate_ResourceNamesFragment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_aggregation_v1_aggregation_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResultPredicate_ResultAction_RegexAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_aggregation_v1_aggregation_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*MatchPredicate_AndMatch)(nil),
		(*MatchPredicate_OrMatch)(nil),
		(*MatchPredicate_NotMatch)(nil),
		(*MatchPredicate_AnyMatch)(nil),
		(*MatchPredicate_RequestTypeMatch_)(nil),
		(*MatchPredicate_RequestNodeMatch_)(nil),
	}
	file_aggregation_v1_aggregation_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*ResultPredicate_AndResult_)(nil),
		(*ResultPredicate_RequestNodeFragment_)(nil),
		(*ResultPredicate_ResourceNamesFragment_)(nil),
		(*ResultPredicate_StringFragment)(nil),
	}
	file_aggregation_v1_aggregation_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*MatchPredicate_RequestNodeMatch_ExactMatch)(nil),
		(*MatchPredicate_RequestNodeMatch_RegexMatch)(nil),
	}
	file_aggregation_v1_aggregation_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ResultPredicate_ResultAction_Exact)(nil),
		(*ResultPredicate_ResultAction_RegexAction_)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_aggregation_v1_aggregation_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_aggregation_v1_aggregation_proto_goTypes,
		DependencyIndexes: file_aggregation_v1_aggregation_proto_depIdxs,
		EnumInfos:         file_aggregation_v1_aggregation_proto_enumTypes,
		MessageInfos:      file_aggregation_v1_aggregation_proto_msgTypes,
	}.Build()
	File_aggregation_v1_aggregation_proto = out.File
	file_aggregation_v1_aggregation_proto_rawDesc = nil
	file_aggregation_v1_aggregation_proto_goTypes = nil
	file_aggregation_v1_aggregation_proto_depIdxs = nil
}
