syntax = "proto3";

package bootstrap;
option go_package = "bootstrap/v1;bootstrapv1";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";


// [#next-free-field: 5]
message Bootstrap {
    // xds-relay server configuration.
    Server server = 1 [(validate.rules).message.required = true];

    // Configuration information about the origin server.
    Upstream origin_server = 2 [(validate.rules).message.required = true];

    // Logging settings.
    Logging logging = 3 [(validate.rules).message.required = true];

    // Request/response cache settings.
    Cache cache = 4 [(validate.rules).message.required = true];
}

// [#next-free-field: 2]
message Server {
    // The TCP address that the xds-relay server will listen on.
    SocketAddress address = 1 [(validate.rules).message.required = true];
}

// [#next-free-field: 2]
message Upstream {
    // The address for the upstream cluster.
    SocketAddress address = 1 [(validate.rules).message.required = true];
}

// [#next-free-field: 3]
message Logging {
    // Filepath where logs are emitted. If no filepath is specified, logs will be written to `/dev/null`.
    string path = 1;

    // The logging level. If no logging level is set, the default is INFO.
    enum Level {
        INFO = 0;
        DEBUG = 1;
        WARN = 2;
        ERROR = 3;
    }
    Level level = 2 [(validate.rules).enum.defined_only = true];
}

// [#next-free-field: 3]
message Cache {
    // Duration before which a key is evicted from the request/response cache. Zero means no expiration time.
    google.protobuf.Duration ttl = 1 [(validate.rules).duration = {required: true, gte: {nanos: 0}}];

    // The maximum number of keys allowed in the request/response cache. If unset, no maximum number will be enforced.
    int32 max_entries = 2;
}

// [#next-free-field: 3]
message SocketAddress {
    // The address for this socket. Listeners will bind to the address.
    string address = 1 [(validate.rules).string = {min_bytes: 1}];

    uint32 port_value = 2 [(validate.rules).uint32 = {lte: 65535}];
}
